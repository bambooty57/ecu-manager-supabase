-- =================================================================
-- 🚀 마이그레이션 필수 테이블 설정 (이 파일 하나만 실행하세요!)
-- =================================================================
-- 이 스크립트는 마이그레이션에 필요한 모든 테이블과 설정을 한 번에 처리합니다.

-- --- 단계 1: work_records 테이블에 user_id 컬럼 추가 ---
-- auth.users 테이블을 참조하는 user_id 컬럼을 추가합니다.
ALTER TABLE public.work_records
ADD COLUMN IF NOT EXISTS user_id UUID REFERENCES auth.users(id) ON DELETE SET NULL;

-- user_id 컬럼에 대한 주석 추가
COMMENT ON COLUMN public.work_records.user_id IS '작업 기록을 생성한 사용자의 ID';

-- 성능 향상을 위한 인덱스 생성
CREATE INDEX IF NOT EXISTS idx_work_records_user_id ON public.work_records(user_id);

-- --- 단계 2: file_metadata 테이블 생성 ---
-- 마이그레이션된 파일 정보를 저장할 테이블을 생성합니다.
CREATE TABLE IF NOT EXISTS public.file_metadata (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
    work_record_id BIGINT REFERENCES public.work_records(id) ON DELETE CASCADE,
    file_name TEXT NOT NULL,
    original_name TEXT,
    file_size BIGINT,
    file_type TEXT,
    category TEXT,
    bucket_name TEXT,
    storage_path TEXT UNIQUE,
    storage_url TEXT UNIQUE,
    is_migrated BOOLEAN DEFAULT TRUE,
    migrated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 테이블 및 컬럼에 대한 주석 추가
COMMENT ON TABLE public.file_metadata IS 'Storage로 마이그레이션된 파일들의 메타데이터를 저장합니다.';
COMMENT ON COLUMN public.file_metadata.work_record_id IS 'work_records 테이블 외래키';

-- 성능 향상을 위한 인덱스 생성
CREATE INDEX IF NOT EXISTS idx_file_metadata_work_record_id ON public.file_metadata(work_record_id);

-- --- 단계 3: Row Level Security (RLS) 정책 설정 ---
-- work_records 테이블 RLS 설정
ALTER TABLE public.work_records ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Users can manage their own work records" ON public.work_records;
DROP POLICY IF EXISTS "Allow all access" ON public.work_records; -- 이전 정책 제거
CREATE POLICY "Users can manage their own work records"
ON public.work_records FOR ALL
USING (auth.uid() = user_id)
WITH CHECK (auth.uid() = user_id);

-- file_metadata 테이블 RLS 설정
ALTER TABLE public.file_metadata ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Public read access for file metadata" ON public.file_metadata;
CREATE POLICY "Public read access for file metadata" ON public.file_metadata FOR SELECT USING (true);
DROP POLICY IF EXISTS "Users can manage their own file metadata" ON public.file_metadata;
CREATE POLICY "Users can manage their own file metadata" ON public.file_metadata FOR ALL
  USING (auth.uid() = (SELECT user_id FROM public.work_records WHERE id = work_record_id))
  WITH CHECK (auth.uid() = (SELECT user_id FROM public.work_records WHERE id = work_record_id));

-- --- 완료 메시지 ---
SELECT '✅ 마이그레이션 필수 테이블 설정이 모두 완료되었습니다.'; 