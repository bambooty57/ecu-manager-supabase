-- ==========================================
-- 📄 file_metadata 테이블 생성 스크립트
-- ==========================================
-- 이 스크립트를 마이그레이션 가이드의 가장 첫 단계에서 실행해야 합니다.

CREATE TABLE IF NOT EXISTS public.file_metadata (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
    work_record_id BIGINT REFERENCES public.work_records(id) ON DELETE CASCADE,
    file_name TEXT NOT NULL,
    original_name TEXT,
    file_size BIGINT,
    file_type TEXT,
    category TEXT,
    bucket_name TEXT,
    storage_path TEXT UNIQUE,
    storage_url TEXT UNIQUE,
    is_migrated BOOLEAN DEFAULT TRUE,
    migrated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 테이블 및 컬럼에 대한 주석 추가
COMMENT ON TABLE public.file_metadata IS 'Storage로 마이그레이션된 파일들의 메타데이터를 저장합니다.';
COMMENT ON COLUMN public.file_metadata.id IS '고유 식별자';
COMMENT ON COLUMN public.file_metadata.created_at IS '레코드 생성 시간';
COMMENT ON COLUMN public.file_metadata.work_record_id IS 'work_records 테이블 외래키';
COMMENT ON COLUMN public.file_metadata.file_name IS 'Storage에 저장된 고유 파일명';
COMMENT ON COLUMN public.file_metadata.original_name IS '사용자가 업로드한 원본 파일명';
COMMENT ON COLUMN public.file_metadata.file_size IS '파일 크기 (bytes)';
COMMENT ON COLUMN public.file_metadata.file_type IS '파일의 MIME 타입';
COMMENT ON COLUMN public.file_metadata.category IS '파일 분류 (e.g., original, read, modified, photo)';
COMMENT ON COLUMN public.file_metadata.bucket_name IS '파일이 저장된 Supabase Storage 버킷 이름';
COMMENT ON COLUMN public.file_metadata.storage_path IS '버킷 내 파일의 전체 경로';
COMMENT ON COLUMN public.file_metadata.storage_url IS '파일 접근을 위한 Public URL';
COMMENT ON COLUMN public.file_metadata.is_migrated IS '마이그레이션 여부';
COMMENT ON COLUMN public.file_metadata.migrated_at IS '마이그레이션 완료 시간';

-- 성능 향상을 위한 인덱스 생성
CREATE INDEX IF NOT EXISTS idx_file_metadata_work_record_id ON public.file_metadata(work_record_id);
CREATE INDEX IF NOT EXISTS idx_file_metadata_file_name ON public.file_metadata(file_name);
CREATE INDEX IF NOT EXISTS idx_file_metadata_category ON public.file_metadata(category);

-- RLS (Row Level Security) 활성화
ALTER TABLE public.file_metadata ENABLE ROW LEVEL SECURITY;

-- 정책 생성: 누구나 읽을 수 있도록 허용
CREATE POLICY "Public read access for file metadata"
ON public.file_metadata
FOR SELECT
USING (true);

-- 정책 생성: 인증된 사용자는 자신의 데이터 추가/수정/삭제 가능
CREATE POLICY "Users can manage their own file metadata"
ON public.file_metadata
FOR ALL
USING (auth.uid() = (SELECT user_id FROM public.work_records WHERE id = work_record_id))
WITH CHECK (auth.uid() = (SELECT user_id FROM public.work_records WHERE id = work_record_id));

-- 모든 작업이 완료되었음을 알림
SELECT '✅ file_metadata 테이블이 성공적으로 생성되었고, RLS 정책이 적용되었습니다.'; 